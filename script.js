// üé≤ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function getRandomMessage(count) {
  const list = messages[count];
  return list[Math.floor(Math.random() * list.length)];
}

// üîÑ –§—É–Ω–∫—Ü–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —á–∏—Å–ª–∞ –¥–æ –Ω–æ–º–µ—Ä–∞ –∞—Ä–∫–∞–Ω–∞ (0-21)
function reduceToArcanum(num) {
  num = Number(num);
  if (num === 22) return 0;
  if (num <= 21) return num;
  let sum = num;
  while (sum > 21) {
    let temp = 0;
    for (let char of sum.toString()) {
      temp += parseInt(char);
    }
    sum = temp;
  }
  return sum;
}

// üìÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
function isValidDate(day, month, year) {
  const date = new Date(year, month - 1, day);
  return date.getFullYear() === year && date.getMonth() === month - 1 && date.getDate() === day;
}

// üîç –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–∏–ª–µ–Ω–Ω—ã—Ö/—É–ª—å—Ç—Ä–∞-–∞—Ä–∫–∞–Ω–æ–≤
function getAmplifiedArcana(day, month, year) {
  const a1 = reduceToArcanum(day);
  const a2 = reduceToArcanum(month);
  const yearSum = String(year).split('').reduce((acc, digit) => acc + parseInt(digit), 0);
  const a3 = reduceToArcanum(yearSum);
  const counts = {};
  [a1, a2, a3].forEach(num => {
    counts[num] = (counts[num] || 0) + 1;
  });
  let amplified = null;
  let isUltra = false;
  for (let num in counts) {
    if (counts[num] >= 2) {
      amplified = parseInt(num);
      isUltra = counts[num] === 3;
      break;
    }
  }
  return { amplified, isUltra };
}

// üñ•Ô∏è –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç –¥–ª—è –û–î–ù–û–ì–û —á–µ–ª–æ–≤–µ–∫–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
function generateSingleCards() {
  const day = parseInt(document.getElementById("day").value);
  const month = parseInt(document.getElementById("month").value);
  const year = parseInt(document.getElementById("year").value);
  if (!day || !month || !year) {
    alert("üåô –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!");
    return;
  }
  if (!isValidDate(day, month, year)) {
    alert("‚ú® –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!");
    return;
  }
  if (year < 1925 || year > 2025) {
    alert("‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ–¥ –æ—Ç 1925 –¥–æ 2025!");
    return;
  }

  // üî• –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞: —Å–Ω–∞—á–∞–ª–∞ —Å—É–º–º–∞ —Ü–∏—Ñ—Ä!
  const yearSum = String(year).split('').reduce((acc, digit) => acc + parseInt(digit), 0);
  const arcana1 = reduceToArcanum(day);
  const arcana2 = reduceToArcanum(month);
  const arcana3 = reduceToArcanum(yearSum);

  const card1 = arcana[arcana1];
  const card2 = arcana[arcana2];
  const card3 = arcana[arcana3];
  const uniqueCardsMap = new Map();
  [card1, card2, card3].forEach(card => uniqueCardsMap.set(card.name, card));
  const cardsToShow = Array.from(uniqueCardsMap.values());
  const uniqueCount = cardsToShow.length;
  const randomMessage = getRandomMessage(uniqueCount);

  let html = `<h3>‚ú® –í–∞—à–∏ —Å–∏–≥–Ω–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:</h3>`;
  html += `<p style="font-size: 18px; font-weight: 500; color: #8b5a7d; margin: 20px 0; text-align: center;">${randomMessage}</p>`;
  html += `<div style="display: flex; justify-content: center; flex-wrap: wrap; gap: 20px; margin: 40px auto; max-width: 1200px;">`;

  cardsToShow.forEach((card, index) => {
    let emoji, color, borderColor, bgColor;
    switch (index) {
      case 0:
        emoji = "üåô";
        color = "#5a9bd5";
        borderColor = "#d0e7ff";
        bgColor = "#f0f9ff";
        break;
      case 1:
        emoji = "üå∏";
        color = "#d87093";
        borderColor = "#ffd6e7";
        bgColor = "#fff0f6";
        break;
      case 2:
      default:
        emoji = "üåø";
        color = "#7cb342";
        borderColor = "#d0f0d0";
        bgColor = "#f0fff0";
        break;
    }
    html += `
      <div class="card-container" style="width: 300px; max-width: 300px; box-sizing: border-box; padding: 20px; background: ${bgColor}; border-radius: 12px; box-shadow: 0 3px 10px rgba(0,0,0,0.08); text-align: center;">
        <h4 style="color: ${color};">${emoji} ${card.name}</h4>
        <img src="${card.image}" alt="${card.name}" style="width: 100%; max-width: 180px; border-radius: 10px; margin: 15px 0; border: 3px solid ${borderColor};">
      </div>
    `;
  });

  html += `</div>`;

  // === –ë–õ–û–ö –£–°–ò–õ–ï–ù–ù–û–ì–û / –£–õ–¨–¢–†–ê –ê–†–ö–ê–ù–ê === (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
  const amplification = getAmplifiedArcana(day, month, year);
  if (amplification.amplified !== null) {
    const cardName = arcana[amplification.amplified].name;
    const level = amplification.isUltra ? "–£–õ–¨–¢–†–ê" : "—É—Å–∏–ª–µ–Ω–Ω—ã–π";
    html += `
      <div style="background: #fff0f0; padding: 15px; border-radius: 12px; margin: 20px auto; max-width: 800px; text-align: center;">
        <p style="margin: 0; font-size: 18px; color: #d93025; font-weight: 600;">
          –£ —Ç–µ–±—è ${level} –∞—Ä–∫–∞–Ω <strong>${cardName}</strong>
        </p>
      </div>
    `;
  }

  // === –í–´–í–û–î –ó–ù–ê–ß–ï–ù–ò–ô –ö–ê–†–¢ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!) ===
  cardsToShow.forEach(card => {
    html += `
      <div style="margin: 40px auto; max-width: 800px; text-align: left; padding: 0 20px;">
        <h2 style="color: #5a4a5d; margin-bottom: 10px; font-family: 'Playfair Display', serif;">${card.name}</h2>
        <p style="white-space: pre-line; font-size: 16px; line-height: 1.7; color: #333; text-align: left; margin: 0 auto;">${card.meaning}</p>
      </div>
    `;
  });

  // üî• === –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–£–†–ò–†–£–Æ–©–ò–• –ê–†–ö–ê–ù–û–í === (—Ç–µ–ø–µ—Ä—å –ü–û–°–õ–ï —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫!)
  const userSet = new Set([arcana1, arcana2, arcana3]);
  const hasCompetingPair = competingPairs.some(([a, b]) => userSet.has(a) && userSet.has(b));

  if (hasCompetingPair) {
    const randomCompetingMessage = COMPETING_ARCANA_MESSAGES[
      Math.floor(Math.random() * COMPETING_ARCANA_MESSAGES.length)
    ];
    html += `
      <div style="background: #fff9c4; padding: 25px; border-radius: 15px; margin: 40px auto; max-width: 800px; text-align: center; border: 1px solid #ffd54f; color: #5d4037; font-weight: 500; font-family: 'Raleway', sans-serif; line-height: 1.6; font-size: 17px;">
        ${randomCompetingMessage}
      </div>
    `;
  }

  // === –§–ò–ù–ê–õ–¨–ù–´–ô –ë–õ–û–ö –° –ü–†–ò–ó–´–í–û–ú –ö –ü–ê–†–ï ===
  let introspectionText = "";
  if (uniqueCount === 1) {
    introspectionText = "–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ —É —Ç–µ–±—è –æ–¥–∏–Ω —É–ª—å—Ç—Ä–∞-–∞—Ä–∫–∞–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤—Å—è —Ç–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è ‚Äî –∏ —Å–≤–µ—Ç–ª–∞—è, –∏ —Ç—ë–º–Ω–∞—è,";
  } else if (uniqueCount === 2) {
    introspectionText = "–î–≤–∞ –∞—Ä–∫–∞–Ω–∞, –æ–ª–∏—Ü–µ—Ç–≤–æ—Ä—è—é—â–∏–µ –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ ‚Äî –ª–∏—à—å –ø—Ä–æ–±–ª–µ—Å–∫ —Ç–≤–æ–µ–π –∏—Å—Ç–∏–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏, –≤–µ–¥—å";
  } else {
    introspectionText = "–¢—Ä–µ—Ö –∞—Ä–∫–∞–Ω–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥–ª—É–±–∏–Ω—É —Ç–≤–æ–µ–π –¥—É—à–∏, –Ω–æ –Ω–µ –ø—Ä–µ–¥–µ–ª, –≤–µ–¥—å";
  }

  html += `
    <div style="background: #f8fdfa; padding: 40px; border-radius: 15px; margin: 60px auto; max-width: 900px; box-shadow: 0 4px 20px rgba(46, 90, 74, 0.1);">
      <h3 style="color: #2e5a4a; font-family: 'Playfair Display', serif; margin-bottom: 30px; line-height: 1.6;">
        ${introspectionText} —Ç—ã –Ω–µ –∑–∞—Å—Ç—ã–≤—à–∏–π –æ–±—Ä–∞–∑.<br>
        –¢—ã –º–µ–Ω—è–µ—à—å—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏, –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö –ø—É—Ç–∏ –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ —Ä—è–¥–æ–º.<br>
        –ü–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ –≥–æ–≤–æ—Ä–∏—Ç –æ –º–æ–º–µ–Ω—Ç–µ.<br>
        –ù–æ –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç—ã –¥–≤—É—Ö –ª—é–¥–µ–π –ª–æ–∂–∞—Ç—Å—è —Ä—è–¥–æ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä.<br><br>
        <a href="couple.html" style="color: #2e5a4a; text-decoration: none; font-weight: bold; border-bottom: 1px solid #2e5a4a; padding-bottom: 2px;">
          –•–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ —Å–∫–∞–∂—É—Ç –æ –≤–∞—Å?
        </a>
      </h3>
    </div>
  `;

  const resultDiv = document.getElementById("result");
  resultDiv.innerHTML = html;
  resultDiv.style.opacity = "1";
  smoothScrollToResult();
}

// üß© –•–µ–ª–ø–µ—Ä: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
function generateCompactPersonBlock(day, month, year, title, emojiSet = ["üåô", "üå∏", "üåø"]) {
  const arcana1 = reduceToArcanum(day);
  const arcana2 = reduceToArcanum(month);
  const yearSum = String(year).split('').reduce((acc, digit) => acc + parseInt(digit), 0);
  const arcana3 = reduceToArcanum(yearSum);
  
  const card1 = arcana[arcana1];
  const card2 = arcana[arcana2];
  const card3 = arcana[arcana3];
  const uniqueCardsMap = new Map();
  [card1, card2, card3].forEach(card => uniqueCardsMap.set(card.name, card));
  const cardsToShow = Array.from(uniqueCardsMap.values());
  const uniqueCount = cardsToShow.length;
  const randomMessage = getRandomMessage(uniqueCount);

  let html = `<div style="background: #fff9f7; padding: 30px; border-radius: 15px; margin: 40px 0; box-shadow: 0 3px 10px rgba(0,0,0,0.05);">`;
  html += `<h2 style="color: #8b5a7d; font-family: 'Playfair Display', serif; text-align: center; margin-top: 0; margin-bottom: 20px;">${title}</h2>`;
  html += `<p style="font-size: 18px; font-weight: 500; color: #8b5a7d; margin: 20px 0; text-align: center;">${randomMessage}</p>`;
  html += `<div style="display: flex; justify-content: center; flex-wrap: wrap; gap: 20px; margin: 30px auto; max-width: 1200px;">`;
  cardsToShow.forEach((card, index) => {
    let emoji, color, borderColor, bgColor;
    switch (index) {
      case 0:
        emoji = emojiSet[0];
        color = "#5a9bd5";
        borderColor = "#d0e7ff";
        bgColor = "#f0f9ff";
        break;
      case 1:
        emoji = emojiSet[1];
        color = "#d87093";
        borderColor = "#ffd6e7";
        bgColor = "#fff0f6";
        break;
      case 2:
      default:
        emoji = emojiSet[2];
        color = "#7cb342";
        borderColor = "#d0f0d0";
        bgColor = "#f0fff0";
        break;
    }
    html += `
      <div class="card-container" style="width: 260px; max-width: 260px; box-sizing: border-box; padding: 15px; background: ${bgColor}; border-radius: 12px; box-shadow: 0 3px 10px rgba(0,0,0,0.08); text-align: center;">
        <h4 style="color: ${color}; margin: 10px 0;">${emoji} ${card.name}</h4>
        <img src="${card.image}" alt="${card.name}" style="width: 150%; max-width: 150px; border-radius: 8px; margin: 10px 0; border: 2px solid ${borderColor};">
      </div>
    `;
  });
  html += `</div>`;
  html += `</div>`;
  return {
    html,
    arcanaList: [arcana1, arcana2, arcana3]
  };
}

// üíû –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç –¥–ª—è –ü–ê–†–´
function generateCoupleCards() {
  const day1 = parseInt(document.getElementById("day1").value);
  const month1 = parseInt(document.getElementById("month1").value);
  const year1 = parseInt(document.getElementById("year1").value);
  const day2 = parseInt(document.getElementById("day2").value);
  const month2 = parseInt(document.getElementById("month2").value);
  const year2 = parseInt(document.getElementById("year2").value);
  if (!day1 || !month1 || !year1 || !day2 || !month2 || !year2) {
    alert("üåô –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª–Ω—ã–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –æ–±–æ–∏—Ö!");
    return; 
  }
  if (!isValidDate(day1, month1, year1)) {
    alert("‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –¥–∞—Ç—É!");
    return;
  }
  if (!isValidDate(day2, month2, year2)) {
    alert("‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –¥–∞—Ç—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞!");
    return;
  }
  if (year1 < 1925 || year1 > 2025 || year2 < 1925 || year2 > 2025) {
    alert("‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ–¥—ã –æ—Ç 1925 –¥–æ 2025!");
    return;
  }
  const person1 = generateCompactPersonBlock(day1, month1, year1, "–¢—ã", ["üåô", "üå∏", "üåø"]);
  const person2 = generateCompactPersonBlock(day2, month2, year2, "–¢–≤–æ–π –ü–∞—Ä—Ç–Ω–µ—Ä", ["‚≠ê", "üíñ", "üçÄ"]);
  let html = `<h3>üíû –ê—Ä–∫–∞–Ω—ã –≤–∞—à–µ–π –ø–∞—Ä—ã</h3>`;
  html += `<div style="width: 1200px; margin: 0 auto; text-align: left;">${person1.html}${person2.html}`;
  const compatibilityText = generateCompatibilityAnalysis(person1.arcanaList, person2.arcanaList);
  html += `
    <div style="background: #fff0f8; padding: 30px; border-radius: 15px; margin: 60px 0; box-shadow: 0 3px 10px rgba(0,0,0,0.05);">
      <h2 style="color: #8b5a7d; font-family: 'Playfair Display', serif; margin-bottom: 30px; text-align: center;">üíû –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</h2>
      <div style="text-align: left; font-size: 16px; line-height: 1.8; color: #333; margin-top: 20px;">${compatibilityText}</div>
    </div>
  `;
  html += `</div>`;
  const resultDiv = document.getElementById("result");
  resultDiv.innerHTML = html;
  smoothScrollToResult();
}

// –£–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ Enter
function handleEnter(event, nextFieldId, isLast = false) {
  if (event.key === "Enter") {
    event.preventDefault();
    if (isLast) {
      if (document.getElementById("generateSingleBtn")) {
        document.getElementById("generateSingleBtn").click();
      } else if (document.getElementById("generateCoupleBtn")) {
        document.getElementById("generateCoupleBtn").click();
      }
    } else {
      const nextField = document.getElementById(nextFieldId);
      if (nextField) {
        nextField.focus();
      }
    }
  }
}


// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
function smoothScrollToResult() {
  const resultElement = document.getElementById("result");
  if (resultElement) {
    const elementPosition = resultElement.getBoundingClientRect().top + window.scrollY;
    const offset = window.innerHeight * 0.05;
    window.scrollTo({ top: elementPosition - offset, behavior: "smooth" });
    setTimeout(() => { resultElement.style.opacity = "1"; }, 100);
  }
}

// üíû –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç—Ä–∏–ø–ª–µ—Ç–æ–≤ –∏ –¥–æ–ø-—Ç–µ–∫—Å—Ç–æ–≤
function generateCompatibilityAnalysis(person1Arcana, person2Arcana) {
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä–∫–∞–Ω—ã –∫–∞–∂–¥–æ–≥–æ
  const set1 = new Set(person1Arcana);
  const set2 = new Set(person2Arcana);

  const allPairs = [];
  const interpretationKeys = new Set();
  const extraMessagesToRender = new Set();

  for (const a of set1) {
    for (const b of set2) {
      if (a === b) {
        const key = `${a}-${a}`;
        if (TAROT_PAIR_INTERPRETATIONS[key]) {
          allPairs.push({ type: 'same', key, a, b });
          interpretationKeys.add(key);
        }
      } else {
        const key = a < b ? `${a}-${b}` : `${b}-${a}`;
        if (TAROT_PAIR_INTERPRETATIONS[key]) {
          allPairs.push({ type: 'cross', key, a, b });
          interpretationKeys.add(key);
        }
      }
    }
  }

  // üîë –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –∫–æ–ø–∏—è –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const keysToRender = new Set(interpretationKeys);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç—Ä–∏–ø–ª–µ—Ç—ã —É –Ω–∞—Å –µ—Å—Ç—å
  const has00 = interpretationKeys.has('0-0');
  const has11 = interpretationKeys.has('1-1');
  const has22 = interpretationKeys.has('2-2');
  const has33 = interpretationKeys.has('3-3');
  const has44 = interpretationKeys.has('4-4');
  const has12 = interpretationKeys.has('1-2');
  const has01 = interpretationKeys.has('0-1');
  const has04 = interpretationKeys.has('0-4');
  const has29 = interpretationKeys.has('2-9');
  const has615 = interpretationKeys.has('6-15');
  const has912 = interpretationKeys.has('9-12');
  const has1819 = interpretationKeys.has('18-19');

  // –¢—Ä–∏–ø–ª–µ—Ç: 2-2 + 9-9 + 2-9 ‚Üí —É–±–∏—Ä–∞–µ–º –∑–µ—Ä–∫–∞–ª–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–Ω—É—é
  if (interpretationKeys.has('2-2') && interpretationKeys.has('9-9') && interpretationKeys.has('2-9')) {
    keysToRender.delete('2-2');
    keysToRender.delete('9-9');
    extraMessagesToRender.add('2-9-deep');
  }

  // –¢—Ä–∏–ø–ª–µ—Ç: 3-3 + 4-4 + 3-4 ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å—ë, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø-—Ç–µ–∫—Å—Ç
  if (interpretationKeys.has('3-3') && interpretationKeys.has('4-4') && interpretationKeys.has('3-4')) {
    extraMessagesToRender.add('3-4-full');
  }

  // –¢—Ä–∏–ø–ª–µ—Ç: 6-6 + 15-15 + 6-15
  if (interpretationKeys.has('6-6') && interpretationKeys.has('15-15') && interpretationKeys.has('6-15')) {
    keysToRender.delete('6-6');
    keysToRender.delete('15-15');
    extraMessagesToRender.add('6-15-deep');
  }

  // –¢—Ä–∏–ø–ª–µ—Ç: 9-9 + 12-12 + 9-12
  if (interpretationKeys.has('9-9') && interpretationKeys.has('12-12') && interpretationKeys.has('9-12')) {
    keysToRender.delete('9-9');
    keysToRender.delete('12-12');
    extraMessagesToRender.add('9-12-deep');
  }

  // –¢—Ä–∏–ø–ª–µ—Ç: 18-18 + 19-19 + 18-19
  if (interpretationKeys.has('18-18') && interpretationKeys.has('19-19') && interpretationKeys.has('18-19')) {
    keysToRender.delete('18-18');
    keysToRender.delete('19-19');
    extraMessagesToRender.add('18-19-deep');
  }

  // –¢—Ä–∏–ø–ª–µ—Ç: 0-0 + 4-4 + 0-4
  if (interpretationKeys.has('0-0') && interpretationKeys.has('4-4') && interpretationKeys.has('0-4')) {
    keysToRender.delete('0-0');
    keysToRender.delete('4-4');
    extraMessagesToRender.add('0-4-deep');
  }

  // –¢—Ä–∏–ø–ª–µ—Ç: 0-0 + 1-1 + 0-1 ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å—ë
  if (interpretationKeys.has('0-0') && interpretationKeys.has('1-1') && interpretationKeys.has('0-1')) {
    extraMessagesToRender.add('0-1-full');
  }

  // –¢—Ä–∏–ø–ª–µ—Ç: 1-1 + 2-2 + 1-2
  if (interpretationKeys.has('1-1') && interpretationKeys.has('2-2') && interpretationKeys.has('1-2')) {
    keysToRender.delete('2-2'); // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –∑–µ—Ä–∫–∞–ª–æ
    extraMessagesToRender.add('1-1-and-1-2');
  }

  // === –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –í–´–í–û–î–ê ===
  const rendered = new Set();
  let html = '';

  // –ö–∞—Ä—Ç–∞: –∫–ª—é—á ‚Üí –∏–º—è –¥–æ–ø-—Å–æ–æ–±—â–µ–Ω–∏—è
  const pairToExtra = {
    '3-4': '3-4-full',
    '1-1': '1-1-and-1-2',
    '0-1': '0-1-full',
    '2-9': '2-9-deep',
    '6-15': '6-15-deep',
    '9-12': '9-12-deep',
    '18-19': '18-19-deep',
    '0-4': '0-4-deep'
  };

  // –ì—Ä—É–ø–ø—ã
  const mirrorPairs = [];
  const regularPairs = [];
  const specialPairs = [];

  for (const key of keysToRender) {
    if (key.split('-')[0] === key.split('-')[1]) {
      // –ó–µ—Ä–∫–∞–ª–æ
      if (extraMessagesToRender.has(pairToExtra[key])) {
        specialPairs.push(key);
      } else {
        mirrorPairs.push(key);
      }
    } else {
      // –ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–Ω–∞—è
      if (extraMessagesToRender.has(pairToExtra[key])) {
        specialPairs.push(key);
      } else {
        regularPairs.push(key);
      }
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–∞—Ä—ã + –¥–æ–ø-—Ç–µ–∫—Å—Ç–∞
  function renderPair(key) {
    if (rendered.has(key)) return '';
    rendered.add(key);
    const text = TAROT_PAIR_INTERPRETATIONS[key];
    if (!text) return '';

    let block = '';
    if (key.split('-')[0] === key.split('-')[1]) {
      const num = parseInt(key);
      block = `<h3>${arcana[num].name} üí† ${arcana[num].name}</h3><p>${text}</p>`;
    } else {
      const [a, b] = key.split('-').map(Number);
      let title;
      if (key === '17-19') title = `${arcana[a].name} ‚ú® ${arcana[b].name}`;
      else if (key === '2-9') title = `${arcana[a].name} üïäÔ∏è ${arcana[b].name}`;
      else if (key === '18-19') title = `${arcana[a].name} üåë ${arcana[b].name}`;
      else title = `${arcana[a].name} üí´ ${arcana[b].name}`;
      block = `<h3>${title}</h3><p>${text}</p>`;
    }

    // –î–æ–ø-—Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –ø–æ–¥ –ø–∞—Ä–æ–π
    const extraKey = pairToExtra[key];
    if (extraKey && extraMessagesToRender.has(extraKey)) {
      const extraText = TAROT_PAIR_EXTRA_MESSAGES[extraKey];
      let bgColor = "#f0f9ff", borderColor = "#5a9bd5", textColor = "#2e5a9d";
      if (extraKey === '3-4-full' || extraKey === '9-12-deep') {
        bgColor = "#f8fdfa"; borderColor = "#7cb342"; textColor = "#2e5a4a";
      } else if (extraKey === '0-1-full' || extraKey === '6-15-deep') {
        bgColor = "#fff5f8"; borderColor = "#d87093"; textColor = "#9a2d5a";
      } else if (extraKey === '18-19-deep') {
        bgColor = "#f0f0ff"; borderColor = "#7a5ca0"; textColor = "#4a3a6a";
      } else if (extraKey === '0-4-deep') {
        bgColor = "#fff8f0"; borderColor = "#bc7a3f"; textColor = "#8a5a2d";
      }
      block += `<div style="background: ${bgColor}; padding: 20px; border-radius: 12px; margin: 20px 0; border-left: 4px solid ${borderColor};">
        <p style="margin: 0; font-style: italic; color: ${textColor};">${extraText}</p>
      </div>`;
    }

    return block;
  }

  // –í—ã–≤–æ–¥–∏–º –≤ –ø–æ—Ä—è–¥–∫–µ: –∑–µ—Ä–∫–∞–ª–∞ ‚Üí –æ–±—ã—á–Ω—ã–µ ‚Üí –æ—Å–æ–±—ã–µ
  for (const key of mirrorPairs) html += renderPair(key);
  for (const key of regularPairs) html += renderPair(key);
  for (const key of specialPairs) html += renderPair(key);

  return html || `<h3>–í–∞—à–∏ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—à–ª–∏ —á—ë—Ç–∫–æ–≥–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–∞—Ö‚Ä¶ –ù–æ —ç—Ç–æ –≤–æ–≤—Å–µ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å–≤—è–∑–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞. –ò, –≤–æ–∑–º–æ–∂–Ω–æ, –∏–º–µ–Ω–Ω–æ –æ—Ç –≤–∞—Å —Å–∞–º–∏—Ö –∑–∞–≤–∏—Å–∏—Ç —á—É—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –æ—Ç –∫–∞—Ä—Ç.</h3>`;
}

// === –ó–ê–ü–û–õ–ù–ï–ù–ò–ï <select> –ò –ù–ê–í–ï–®–ò–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ===
document.addEventListener('DOMContentLoaded', () => {
  const months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];

  function fillSelect(id, values) {
    const sel = document.getElementById(id);
    if (!sel) return;
    values.forEach(val => {
      const opt = document.createElement('option');
      if (typeof val === 'object') {
        opt.value = val.value;
        opt.textContent = val.text;
      } else {
        opt.value = val;
        opt.textContent = val;
      }
      sel.appendChild(opt);
    });
  }

  if (document.getElementById('day')) {
    fillSelect('day', Array.from({length: 31}, (_, i) => i + 1));
    fillSelect('month', months.map((name, i) => ({ value: i + 1, text: name })));
    fillSelect('year', Array.from({length: 101}, (_, i) => 2025 - i));
  }

  if (document.getElementById('day1')) {
    fillSelect('day1', Array.from({length: 31}, (_, i) => i + 1));
    fillSelect('month1', months.map((name, i) => ({ value: i + 1, text: name })));
    fillSelect('year1', Array.from({length: 101}, (_, i) => 2025 - i));
    fillSelect('day2', Array.from({length: 31}, (_, i) => i + 1));
    fillSelect('month2', months.map((name, i) => ({ value: i + 1, text: name })));
    fillSelect('year2', Array.from({length: 101}, (_, i) => 2025 - i));
  }

  if (document.getElementById("day")) {
    document.getElementById("day").addEventListener("keydown", e => handleEnter(e, "month"));
    document.getElementById("month").addEventListener("keydown", e => handleEnter(e, "year"));
    document.getElementById("year").addEventListener("keydown", e => handleEnter(e, null, true));
    document.getElementById("day").focus();
  }
  if (document.getElementById("day1")) {
    document.getElementById("day1").addEventListener("keydown", e => handleEnter(e, "month1"));
    document.getElementById("month1").addEventListener("keydown", e => handleEnter(e, "year1"));
    document.getElementById("year1").addEventListener("keydown", e => handleEnter(e, "day2"));
    document.getElementById("day2").addEventListener("keydown", e => handleEnter(e, "month2"));
    document.getElementById("month2").addEventListener("keydown", e => handleEnter(e, "year2"));
    document.getElementById("year2").addEventListener("keydown", e => handleEnter(e, null, true));
    document.getElementById("day1").focus();
  }
});

function getRandomCardsFromAllDecks(count = 10) {
  // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
  const cards = [...allTarotCards];
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ –§–∏—à–µ—Ä—É‚Äì–ô–µ—Ç—Å—É
  for (let i = cards.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [cards[i], cards[j]] = [cards[j], cards[i]];
  }
  return cards.slice(0, count);
}

// üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç (10 –∫–∞—Ä—Ç)
function renderPlusAndColumnLayout() {
  const cards = getRandomCardsFromAllDecks(10);
  if (cards.length < 10) {
    return "<p>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–∞—Ö!</p>";
  }

  let html = ``;
  html += `<div class="layout-container">`;

  // === –õ–ï–í–ê–Ø –ß–ê–°–¢–¨: –ü–õ–Æ–° ===
  html += `<div class="plus-layout">`;

  // –ü–æ–∑–∏—Ü–∏—è 3
  html += `<div class="card-box" data-pos="3">
    <img src="${cards[2].image}" alt="${cards[2].name}">
    <h4>${cards[2].name}</h4>
  </div>`;

  // –°—Ä–µ–¥–Ω–∏–π —Ä—è–¥: 5 ‚Äî 1 ‚Äî 6
  html += `<div class="plus-row">`;

  // –ü–æ–∑–∏—Ü–∏—è 5
  html += `<div class="card-box" data-pos="5">
    <img src="${cards[4].image}" alt="${cards[4].name}">
    <h4>${cards[4].name}</h4>
  </div>`;

// –ü–æ–∑–∏—Ü–∏—è 1 ‚Äî –î–í–ï –ö–ê–†–¢–´ (–æ—Å–Ω–æ–≤–Ω–∞—è + –Ω–∞–ª–æ–∂–µ–Ω–Ω–∞—è)
html += `<div class="card-box" data-pos="1" style="position: relative; width: 280px;">
  <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ -->
  <img src="${cards[0].image}" alt="${cards[0].name}" style="width: 200px; height: auto; max-height: 200px; object-fit: contain; object-position: center; border-radius: 8px;">

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã -->
  <div style="position: absolute; top: 0; left: 0; width: 200px; height: 200px; pointer-events: none; z-index: 2;">

    <!-- –ö–ê–†–¢–ê 2 -->
    <img src="${cards[1].image}" alt="${cards[1].name}" 
         style="position: absolute; top: 55%; left: 68%; transform: translate(-50%, -50%) rotate(-90deg); width: 90%; max-height: 100%; height: auto; object-fit: contain; opacity: 0.95; border-radius: 6px;">

    <!-- üîµ –ö–†–£–ñ–û–ö –° –¶–ò–§–†–û–ô 2 (—Å–ª–µ–≤–∞ –æ—Ç –∫–∞—Ä—Ç—ã 2) -->
    <div style="position: absolute; top: 55%; left: 70%; 
                transform: translate(-50%, -50%) translateX(-105px) rotate(-90deg);
                background: #c98a5e; color: white; font-weight: bold; font-size: 16px;
                width: 30px; height: 30px; border-radius: 50%;
                display: flex; align-items: center; justify-content: center;
                z-index: 3;">
      2
    </div>

    <!-- üìõ –ù–ê–ó–í–ê–ù–ò–ï –ö–ê–†–¢–´ 2 (—Å–ø—Ä–∞–≤–∞ –æ—Ç –∫–∞—Ä—Ç—ã 2) -->
    <div style="position: absolute; top: 55%; left: 70%;
                transform: translate(-50%, -50%) translateX(110px) rotate(-90deg);
                white-space: nowrap;
                font-size: 16px; font-weight: 600; color: #5a4a5d;
                text-align: center;
                max-width: 180px;
                overflow: hidden;
                text-overflow: ellipsis;
                z-index: 3;"
         title="${cards[1].name}">
      ${cards[1].name}
    </div>

  </div>

  <!-- –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã -->
  <h4 style="position: relative; z-index: 3;">${cards[0].name}</h4>
</div>`;

  // –ü–æ–∑–∏—Ü–∏—è 6
  html += `<div class="card-box" data-pos="6">
    <img src="${cards[5].image}" alt="${cards[5].name}">
    <h4>${cards[5].name}</h4>
  </div>`;

  html += `</div>`; // –∫–æ–Ω–µ—Ü plus-row

  // –ü–æ–∑–∏—Ü–∏—è 4
  html += `<div class="card-box" data-pos="4">
    <img src="${cards[3].image}" alt="${cards[3].name}">
    <h4>${cards[3].name}</h4>
  </div>`;

  html += `</div>`; // –∫–æ–Ω–µ—Ü plus-layout

  // === –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨: –°–¢–û–õ–ë–ï–¶ (10, 9, 8, 7)
  html += `<div class="column-layout">`;

  // –ü–æ–∑–∏—Ü–∏—è 10 ‚Äî –∫–∞—Ä—Ç–∞ cards[9] –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Å—Ç–æ–ª–±—Ü–µ
  html += `<div class="card-box" data-pos="10">
    <img src="${cards[9].image}" alt="${cards[9].name}">
    <h4>${cards[9].name}</h4>
  </div>`;

  html += `<div class="card-box" data-pos="9">
    <img src="${cards[8].image}" alt="${cards[8].name}">
    <h4>${cards[8].name}</h4>
  </div>`;

  html += `<div class="card-box" data-pos="8">
    <img src="${cards[7].image}" alt="${cards[7].name}">
    <h4>${cards[7].name}</h4>
  </div>`;

  html += `<div class="card-box" data-pos="7">
    <img src="${cards[6].image}" alt="${cards[6].name}">
    <h4>${cards[6].name}</h4>
  </div>`;

  html += `</div>`; // –∫–æ–Ω–µ—Ü column-layout

  html += `</div>`; // –∫–æ–Ω–µ—Ü layout-container

// === –¢–†–ê–ö–¢–û–í–ö–ò (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: –ø–æ–∑–∏—Ü–∏—è 1 ‚Üí cards[0], ..., –ø–æ–∑–∏—Ü–∏—è 10 ‚Üí cards[9]) ===
html += `<div style="margin: 50px auto; max-width: 800px; text-align: left; padding: 0 20px;">`;
for (let i = 0; i < 10; i++) {
  const position = i + 1; // –ø–æ–∑–∏—Ü–∏—è –æ—Ç 1 –¥–æ 10
  const card = cards[i];
  html += `
    <div style="margin: 25px 0; padding: 15px; background: #fff; border-radius: 10px; border-left: 4px solid #8b5a7d;">
      <h3 style="color: #8b5a7d; margin: 5px 0;">${position}. ${card.name}</h3>
<p style="white-space: pre-line; font-size: 16px; line-height: 1.7; color: #333;">${
  positionTemplates[position]
    ? positionTemplates[position](card, false) // –ø–æ–∫–∞ –±–µ–∑ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–æ–≤ ‚Üí isReversed = false
    : '–¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
}</p>
    </div>
  `;
}
html += `</div>`;

  return html;
}

// ‚ñ∂Ô∏è –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ HTML)
function generatePlusAndColumn() {
  const html = renderPlusAndColumnLayout();
  const resultDiv = document.getElementById("result");
  resultDiv.innerHTML = html;
  resultDiv.style.opacity = "1";
  if (typeof smoothScrollToResult === 'function') {
    smoothScrollToResult();
  }
} 